import Chatbot from "react-chatbotify";
// import "react-chatbotify/dist/main.css";

// Fun√ß√£o simples de similaridade baseada em Levenshtein Distance
function getClosestPath(input: string, options: string[]): string | null {
  input = input.trim().toLowerCase();
  let minDistance = Infinity;
  let closest = null;
  for (const option of options) {
    const distance = levenshtein(input, option.toLowerCase());
    if (distance < minDistance) {
      minDistance = distance;
      closest = option;
    }
  }
  // O threshold abaixo define o quanto de erro de digita√ß√£o √© aceito.
  // Quanto MENOR o valor, mais rigoroso: s√≥ aceita respostas quase id√™nticas.
  // Quanto MAIOR o valor, mais permissivo: aceita respostas com mais erros.
  // Exemplos:
  //   0: s√≥ aceita igual (case-insensitive)
  //   1: aceita 1 letra errada, faltando ou trocada
  //   2: aceita at√© 2 erros (recomendado para portugu√™s, pois nomes de op√ß√µes s√£o longos)
  //   3+: aceita ainda mais erros, mas pode causar falsos positivos
  // Ajuste conforme o comportamento desejado:
  const threshold = 2;
  if (minDistance <= threshold) return closest;
  return null;
}

// Levenshtein Distance
function levenshtein(a: string, b: string): number {
  const matrix = [];
  for (let i = 0; i <= b.length; i++) {
    matrix[i] = [i];
  }
  for (let j = 0; j <= a.length; j++) {
    matrix[0][j] = j;
  }
  for (let i = 1; i <= b.length; i++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i - 1) === a.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j] + 1      // deletion
        );
      }
    }
  }
  return matrix[b.length][a.length];
}

const flow = {
  start: {
    message: "Ol√°! Como posso ajudar voc√™ hoje?",
    options: [
      "Quero saber mais sobre o portf√≥lio",
      "Entrar em contato",
      "Quais tecnologias voc√™ usa?",
      "Como funciona o processo de desenvolvimento?",
      "Qual o prazo m√©dio para um projeto?",
      "Como √© feito o or√ßamento?",
      "Voc√™ trabalha sozinho ou em equipe?",
      "Quais tipos de projeto voc√™ j√° fez?",
      "Voc√™ oferece manuten√ß√£o ou suporte?",
      "Quais as formas de pagamento?",
      "Como s√£o feitas as reuni√µes?",
      "Posso ver outros trabalhos seus?",
      "Qual seu diferencial?",
    ],
    path: async (params: any) => {
      const input = params.userInput || "";
      const options = [
        "Quero saber mais sobre o portf√≥lio",
        "Entrar em contato",
        "Quais tecnologias voc√™ usa?",
        "Como funciona o processo de desenvolvimento?",
        "Qual o prazo m√©dio para um projeto?",
        "Como √© feito o or√ßamento?",
        "Voc√™ trabalha sozinho ou em equipe?",
        "Quais tipos de projeto voc√™ j√° fez?",
        "Voc√™ oferece manuten√ß√£o ou suporte?",
        "Quais as formas de pagamento?",
        "Como s√£o feitas as reuni√µes?",
        "Posso ver outros trabalhos seus?",
        "Qual seu diferencial?",
      ];
      const pathMap: Record<string, string> = {
        "quero saber mais sobre o portf√≥lio": "portfolioInfo",
        "entrar em contato": "contactInfo",
        "quais tecnologias voc√™ usa?": "tecnologias",
        "como funciona o processo de desenvolvimento?": "processo",
        "qual o prazo m√©dio para um projeto?": "prazo",
        "como √© feito o or√ßamento?": "orcamento",
        "voc√™ trabalha sozinho ou em equipe?": "equipe",
        "quais tipos de projeto voc√™ j√° fez?": "tiposProjetos",
        "voc√™ oferece manuten√ß√£o ou suporte?": "suporte",
        "quais as formas de pagamento?": "pagamento",
        "como s√£o feitas as reuni√µes?": "reunioes",
        "posso ver outros trabalhos seus?": "portfolioOnline",
        "qual seu diferencial?": "diferencial",
      };
      const closest = getClosestPath(input, options);
      if (closest) {
        return pathMap[closest.toLowerCase()];
      }
      if (input.length > 0) {
        await params.injectMessage("Desculpe, n√£o entendi sua pergunta. Por favor, escolha uma das op√ß√µes ou reformule sua d√∫vida.");
      }
      return "start";
    },
  },
  portfolioInfo: {
    message: "Este portf√≥lio foi criado com React, Vite e Tailwind CSS!",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
  contactInfo: {
    message: "Voc√™ pode entrar em contato pelo e-mail: seuemail@exemplo.com",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
  tecnologias: {
    message: "Trabalho principalmente com React, TypeScript, Node.js, Vite, Tailwind CSS e integra√ß√µes com APIs.",
    options: ["Voltar ao in√≠cio", "Quais tipos de projeto voc√™ j√° fez?"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "quais tipos de projeto voc√™ j√° fez?") return "tiposProjetos";
      return "start";
    },
  },
  processo: {
    message: "O processo come√ßa com o entendimento da sua necessidade, seguido de planejamento, prototipa√ß√£o, desenvolvimento, testes e entrega.",
    options: ["Voltar ao in√≠cio", "Como √© feito o or√ßamento?"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "como √© feito o or√ßamento?") return "orcamento";
      return "start";
    },
  },
  prazo: {
    message: "O prazo m√©dio depende do escopo, mas projetos simples levam de 1 a 3 semanas. Projetos maiores podem levar mais tempo.",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
  orcamento: {
    message: "O or√ßamento √© feito com base na complexidade, funcionalidades e prazo do projeto. Sempre envio uma proposta detalhada.",
    options: ["Voltar ao in√≠cio", "Entrar em contato"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "entrar em contato") return "contactInfo";
      return "start";
    },
  },
  equipe: {
    message: "Atuo como freelancer, mas posso trabalhar em parceria com outros profissionais conforme a demanda do projeto.",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
  tiposProjetos: {
    message: "J√° desenvolvi portf√≥lios, landing pages, sistemas internos, integra√ß√µes com APIs, dashboards e e-commerces.",
    options: ["Voltar ao in√≠cio", "Quais tecnologias voc√™ usa?"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "quais tecnologias voc√™ usa?") return "tecnologias";
      return "start";
    },
  },
  suporte: {
    message: "Sim! Ofere√ßo manuten√ß√£o e suporte ap√≥s a entrega, com planos flex√≠veis conforme a necessidade do cliente.",
    options: ["Voltar ao in√≠cio", "Quais as formas de pagamento?"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "quais as formas de pagamento?") return "pagamento";
      return "start";
    },
  },
  pagamento: {
    message: "Aceito pagamentos via Pix, transfer√™ncia banc√°ria, podemos negociar outras forma de pagamento dependendo do escopo do projeto.",
    options: ["Voltar ao in√≠cio", "Como s√£o feitas as reuni√µes?"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "como s√£o feitas as reuni√µes?") return "reunioes";
      return "start";
    },
  },
  reunioes: {
    message: "As reuni√µes podem ser feitas por Google Meet, Zoom ou WhatsApp, conforme sua prefer√™ncia.",
    options: ["Voltar ao in√≠cio", "Entrar em contato"],
    path: (params: any) => {
      const input = params.userInput || "";
      const normalized = input.trim().toLowerCase();
      if (normalized === "entrar em contato") return "contactInfo";
      return "start";
    },
  },
  portfolioOnline: {
    message: "Claro! Voc√™ pode ver outros trabalhos acessando meu portf√≥lio online: https://seuportfolio.com",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
  diferencial: {
    message: "Meu diferencial √© a comunica√ß√£o clara, entrega √°gil e foco total na experi√™ncia do usu√°rio e resultado do cliente.",
    options: ["Voltar ao in√≠cio"],
    path: () => "start",
  },
};

const themes = [
  { id: "minimal_midnight", version: "0.1.0" },
];
const settings = {
  general: {
    embedded: true,
  },
  header: {
    title: "Tire suas d√∫vidas üí¨",
  },
};

export default function CustomChatbot() {
  return (
    <Chatbot flow={flow} themes={themes} settings={settings} />
  );
}